/*######################### SET EMPLOYEE ##############################*/
DROP PROCEDURE IF EXISTS SET_EMPLOYEE;
DELIMITER // 
CREATE PROCEDURE SET_EMPLOYEE (
	IN IN_EMPLOYEE INT,
	IN IN_NAME VARCHAR(50),
    IN IN_LAST_NAME VARCHAR(50),
    IN IN_POSITION INT,
    IN IN_SHIFT INT,
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_EMPLOYEE] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_EMPLOYEE IS NOT NULL THEN 
		UPDATE EMPLOYEE SET
			FIRST_NAME = IN_NAME,
            LAST_NAME = IN_LAST_NAME,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER,
            POSITION_ID = IN_POSITION,
            SHIFT = IN_SHIFT
		WHERE EMPLOYEE_ID = IN_EMPLOYEE;
	ELSE
		INSERT INTO EMPLOYEE (
			FIRST_NAME,
            LAST_NAME,
            STATUS,
            CREATED_ON,
            CREATED_BY ,
            POSITION_ID,
            SHIFT
        ) VALUES (
			IN_NAME,
            IN_LAST_NAME,
			'ENABLED',
            NOW(),
            IN_USER,
			IN_POSITION,
            SHIFT
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_EMPLOYEE(
			NULL,
			'TONATIUH',
			'LOPEZ RAMIREZ',
			NULL,
			NULL,
			'API_TEST',
			@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET DEPARTAMENT ##############################*/
DROP PROCEDURE IF EXISTS SET_DEPARTAMENT;
DELIMITER //
CREATE PROCEDURE SET_DEPARTAMENT (
	IN IN_DEPTO INT,
    IN IN_NAME VARCHAR(50),
    IN IN_CODE VARCHAR(20),
    IN IN_USER VARCHAR(40),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_DEPARTAMENT] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_DEPTO IS NOT NULL THEN 
		UPDATE DEPARTAMENT SET
			NAME = IN_NAME,
            CODE = IN_CODE,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER
		WHERE DEPARTAMENT_ID = IN_DEPTO;
	ELSE
		INSERT INTO DEPARTAMENT (
			NAME,
            CODE,
            STATUS,
            CREATED_ON,
            CREATED_BY 
		) VALUES (
			IN_NAME,
            IN_CODE,
			'ENABLED',
            NOW(),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_DEPARTAMENT(
		NULL,
		'DEPTO 1',
		'D1',
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET JOB ##############################*/
DROP PROCEDURE IF EXISTS SET_JOB;
DELIMITER // 
CREATE PROCEDURE SET_JOB (
	IN IN_JOB INT,
	IN IN_NAME VARCHAR(50),
    IN IN_DESCRIPTION TEXT,
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_JOB] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_JOB IS NOT NULL THEN 
		UPDATE JOB SET
			NAME = IN_NAME,
            DESCRIPTION = IN_DESCRIPTION,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER
		WHERE JOB_ID = IN_JOB;
	ELSE
		INSERT INTO JOB (
			NAME,
            DESCRIPTION,
            STATUS,
            CREATED_ON,
            CREATED_BY
        ) VALUES (
			IN_NAME,
            IN_DESCRIPTION,
			'ENABLED',
            NOW(),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_JOB(
		NULL,
		'JOB',
		'TEST JOB',
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

