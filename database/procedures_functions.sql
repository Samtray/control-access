/*######################### SET EMPLOYEE ##############################*/
DROP PROCEDURE IF EXISTS SET_EMPLOYEE;
DELIMITER // 
CREATE PROCEDURE SET_EMPLOYEE (
	IN IN_EMPLOYEE INT,
	IN IN_NAME VARCHAR(50),
    IN IN_LAST_NAME VARCHAR(50),
    IN IN_POSITION INT,
    IN IN_SHIFT INT,
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_EMPLOYEE] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_EMPLOYEE IS NOT NULL THEN 
		UPDATE EMPLOYEE SET
			FIRST_NAME = IN_NAME,
            LAST_NAME = IN_LAST_NAME,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER,
            POSITION_ID = IN_POSITION,
            SHIFT = IN_SHIFT
		WHERE EMPLOYEE_ID = IN_EMPLOYEE;
	ELSE
		INSERT INTO EMPLOYEE (
			FIRST_NAME,
            LAST_NAME,
            STATUS,
            CREATED_ON,
            CREATED_BY ,
            POSITION_ID,
            SHIFT
        ) VALUES (
			IN_NAME,
            IN_LAST_NAME,
			'ENABLED',
            NOW(),
            IN_USER,
			IN_POSITION,
            IN_SHIFT
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_EMPLOYEE(
			NULL,
			'TONATIUH',
			'LOPEZ RAMIREZ',
			NULL,
			NULL,
			'API_TEST',
			@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET DEPARTAMENT ##############################*/
DROP PROCEDURE IF EXISTS SET_DEPARTAMENT;
DELIMITER //
CREATE PROCEDURE SET_DEPARTAMENT (
	IN IN_DEPTO INT,
    IN IN_NAME VARCHAR(50),
    IN IN_CODE VARCHAR(20),
    IN IN_USER VARCHAR(40),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_DEPARTAMENT] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_DEPTO IS NOT NULL THEN 
		UPDATE DEPARTAMENT SET
			NAME = IN_NAME,
            CODE = IN_CODE,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER
		WHERE DEPARTAMENT_ID = IN_DEPTO;
	ELSE
		INSERT INTO DEPARTAMENT (
			NAME,
            CODE,
            STATUS,
            CREATED_ON,
            CREATED_BY 
		) VALUES (
			IN_NAME,
            IN_CODE,
			'ENABLED',
            NOW(),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_DEPARTAMENT(
		NULL,
		'DEPTO 1',
		'D1',
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET JOB ##############################*/
DROP PROCEDURE IF EXISTS SET_JOB;
DELIMITER // 
CREATE PROCEDURE SET_JOB (
	IN IN_JOB INT,
	IN IN_NAME VARCHAR(50),
    IN IN_DESCRIPTION TEXT,
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_JOB] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_JOB IS NOT NULL THEN 
		UPDATE JOB SET
			NAME = IN_NAME,
            DESCRIPTION = IN_DESCRIPTION,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER
		WHERE JOB_ID = IN_JOB;
	ELSE
		INSERT INTO JOB (
			NAME,
            DESCRIPTION,
            STATUS,
            CREATED_ON,
            CREATED_BY
        ) VALUES (
			IN_NAME,
            IN_DESCRIPTION,
			'ENABLED',
            NOW(),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_JOB(
		NULL,
		'JOB',
		'TEST JOB',
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET CARD ##############################*/
DROP PROCEDURE IF EXISTS SET_CARD;
DELIMITER // 
CREATE PROCEDURE SET_CARD (
	IN IN_CARD_ID INT,
	IN IN_NUMBER VARCHAR(20),
    IN IN_EMPLOYEE INT,
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_CARD] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
    
    IF IN_CARD_ID IS NOT NULL THEN 
		UPDATE CARD SET
			NUMBER = IN_NUMBER,
            EMPLOYEE_ID = IN_EMPLOYEE,
            STATUS = 'ENABLED',
            UPDATED_ON = NOW(),
            UPDATED_BY = IN_USER
		WHERE CARD_ID = IN_CARD_ID;
	ELSE
		INSERT INTO CARD (
            NUMBER,
            EMPLOYEE_ID,
            STATUS,
            CREATED_ON,
            CREATED_BY
        ) VALUES (
			IN_NUMBER,
            IN_EMPLOYEE,
			'ENABLED',
            NOW(),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_CARD(
		NULL,
		'12345',
		1,
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

/*######################### SET CARD_CHECK ##############################*/
DROP PROCEDURE IF EXISTS SET_CARD_CHECK;
DELIMITER // 
CREATE PROCEDURE SET_CARD_CHECK (
	IN IN_NUMBER VARCHAR(20),
    IN IN_USER VARCHAR(50),
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE VL_EMPLOYEE INT DEFAULT GET_CARD_DETAIL(IN_NUMBER);
    DECLARE CUR_SHIFT CURSOR FOR SELECT VL_EMPLOYEE;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [SET_CARD_CHECK] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_RESULT = 'OK';
END //
DELIMITER ;

/* TESTING PROCEDURE  
	SET @RESULT = '';
	CALL SET_CARD(
		NULL,
		'12345',
		1,
		'API_TEST',
		@RESULT
	);
	SELECT @RESULT;
*/

/*  GET OWNERS CARD */
DROP FUNCTION IF EXISTS GET_CARD_DETAIL;
DELIMITER //
CREATE FUNCTION GET_CARD_DETAIL (
	IN_NUMBER VARCHAR(20)
) RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE VL_EMPLOYEE INT DEFAULT 0;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN 
		SET VL_EMPLOYEE = NULL;
    END;
	
    SELECT EMPLOYEE_ID 
    INTO VL_EMPLOYEE 
    FROM CARD C 
    WHERE C.NUMBER = IN_NUMBER;
    
    RETURN VL_EMPLOYEE;
END //
DELIMITER ;