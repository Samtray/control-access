DROP PROCEDURE IF EXISTS GET_EMPLOYEE_DETAIL;
DELIMITER //
CREATE PROCEDURE GET_EMPLOYEE_DETAIL(
	IN IN_EMPLOYEE INT,
    OUT OUT_RESULT VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_EMPLOYEE_DETAIL] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
	SET OUT_RESULT = 'OK';
	SELECT 		
		E.EMPLOYEE_ID, 
		E.FIRST_NAME, 
		E.LAST_NAME, 
		E.POSITION_ID, 
		E.SHIFT SHIFT_ID, 
		E.STATUS EMPLOYEE_STATUS,     
		P.POSITION_ID, 
		P.NAME POSITION_NAME, 
		P.DEPARTAMENT_ID,     
		P.JOB_ID,     
		D.NAME DEPARTAMENT,
		D.CODE DEPTO_CODE,         	
		J.NAME JOB, 
		J.DESCRIPTION JOB_DETAIL, 	
		S.NAME SHIFT_CODE, 
		S.CLOCK_IN IN_SHIFT, 
		S.CLOCK_OUT OUT_SHIFT,
		S.LUNCH_TIME LUNCH, 
		S.DAY_COUNT SHIFT_INTERVAL, 
		C.CARD_ID, 
		C.NUMBER CARD_NUMBER, 
		C.STATUS CARD_STATUS
	FROM 
		EMPLOYEE E LEFT JOIN POSITION P ON E.POSITION_ID = P.POSITION_ID
		LEFT JOIN DEPARTAMENT D ON P.DEPARTAMENT_ID = D.DEPARTAMENT_ID
		LEFT JOIN JOB J ON P.JOB_ID = J.JOB_ID
		LEFT JOIN SHIFT S ON E.SHIFT = S.SHIFT_ID 
		LEFT JOIN CARD C ON C.EMPLOYEE_ID = E.EMPLOYEE_ID
	WHERE 
		E.EMPLOYEE_ID = IFNULL(IN_EMPLOYEE, E.EMPLOYEE_ID)
        AND E.STATUS = 'ENABLED';	
        
END //
DELIMITER ;

/*set @OUT_RESULT = '';
call ctl_access.GET_EMPLOYEE_DETAIL(NULL, @OUT_RESULT);
select @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_EMPLOYEE_ACCESS_LEVEL;
DELIMITER //
CREATE PROCEDURE GET_EMPLOYEE_ACCESS_LEVEL (
	IN IN_EMPLOYEE INT, 
    OUT OUT_RESULT VARCHAR(500)   
) BEGIN 	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_EMPLOYEE_DETAIL] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
	SET OUT_RESULT = 'OK';
    
    SELECT 
		EAL.EMPLOYEE_ID,
		EAL.ACCESS_LEVEL_ID,
		AL.NAME,
		EAL.STATUS    
	FROM 
		EMPLOYEE_ACCESS_LEVEL EAL, ACCESS_LEVEL AL
	WHERE 
		EAL.ACCESS_LEVEL_ID = AL.ACCESS_LEVEL_ID
	AND	EAL.EMPLOYEE_ID = IFNULL(IN_EMPLOYEE, EAL.EMPLOYEE_ID);
    
END //
DELIMITER ;

/*set @OUT_RESULT = '0';
call ctl_access.GET_EMPLOYEE_ACCESS_LEVEL(NULL, @OUT_RESULT);
select @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_DEPARTAMENTS;
DELIMITER //
CREATE PROCEDURE GET_DEPARTAMENTS(
    IN IN_DEPTO INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_DEPARTAMENTS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;

    SET OUT_RESULT = 'OK';

    SELECT 
        DEPARTAMENT_ID, 
        CODE,
        NAME,
        STATUS 
    FROM 
        DEPARTAMENT
    WHERE 
        DEPARTAMENT_ID = IFNULL(IN_DEPTO, DEPARTAMENT_ID)
        AND STATUS = 'ENABLED';
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_DEPARTAMENTS(1, @OUT_RESULT);
SELECT  @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_JOBS;
DELIMITER //
CREATE PROCEDURE GET_JOBS(
    IN  IN_JOB INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_JOBS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';

    SELECT 
		JOB_ID, DESCRIPTION, NAME
    FROM
        JOB
    WHERE
        JOB_ID = IFNULL(NULL, JOB_ID)
    AND STATUS = 'ENABLED';

END //
DELIMITER ;